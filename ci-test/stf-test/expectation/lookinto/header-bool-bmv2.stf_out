p4 program:
\n
/*
Copyright 2019 MNK Consulting, LLC.
http://mnkcg.com

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

header Hdr1 {
    bit<7> a;
    bool   x;
}

header Hdr2 {
    bit<16> b;
}

header_union U {
    Hdr1 h1;
    Hdr2 h2;
}

struct Headers {
    Hdr1 h1;
    U u;
}

struct Meta {}

parser p(packet_in b, out Headers h, inout Meta m, inout standard_metadata_t sm) {
    state start {
        b.extract(h.h1);
        transition select(h.h1.a) {
            0: getH1;
            default: getH2;
        }
    }

    state getH1 {
        b.extract(h.u.h1);
        transition accept;
    }

    state getH2 {
        b.extract(h.u.h2);
        transition accept;
    }
}

control vrfy(inout Headers h, inout Meta m) { apply {} }
control update(inout Headers h, inout Meta m) { apply {} }

control egress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
    apply {
        h.u.h1.x = true;
    }
}

control deparser(packet_out b, in Headers h) {
    apply {
        b.emit(h.h1);
        b.emit(h.u);
    }
}

control ingress(inout Headers h, inout Meta m, inout standard_metadata_t sm) {
    apply {
        if (h.u.h2.isValid())
            h.u.h2.setInvalid();
    }
}

V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
\n
\n
packet 0 80 2345 666666
expect 0 80 666666
packet 0 81 2345 666666
expect 0 81 666666
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/header-bool-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
