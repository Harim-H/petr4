p4 program:
\n
#include <ebpf_model.p4>
#include <core.p4>

#include "ebpf_headers.p4"

struct Headers_t {
    Ethernet_h ethernet;
    IPv4_h     ipv4;
}

parser prs(packet_in p, out Headers_t headers) {
    state start {
        p.extract(headers.ethernet);
        transition select(headers.ethernet.etherType) {
            16w0x800 : ip;
            default : reject;
        }
    }

    state ip {
        p.extract(headers.ipv4);
        transition accept;
    }
}

control pipe(inout Headers_t headers, out bool pass) {
    action invalidate() {
        headers.ipv4.setInvalid();
        headers.ethernet.setInvalid();
        pass = true;
    }
    action drop() {
        pass = false;
    }
    table t {
        key = {
            headers.ipv4.srcAddr + 1 : exact @name(" headers.ipv4.srcAddr");
            headers.ipv4.dstAddr + 1 : exact @name("headers.ipv4.dstAddr");
            headers.ethernet.dstAddr : exact;
            headers.ethernet.srcAddr : exact;
        }
        actions = {
            invalidate; drop;
        }
        implementation = hash_table(10);
        default_action = drop;
    }

    apply {
        bool hit;
        hit = t.apply().hit;
    }
}

ebpfFilter(prs(), pipe()) main;
\n
\n
# bit<32> A bit<32> B
# In the output B = (A + 10)
add pipe_t 0 key.field0:0x0a019846 key.field1:0x3212c86b key.field2:0x001b17000130 key.field3:0xb88198b7aeb7 pipe_invalidate()

packet 0 00000000 00000000 00000000 00000000 00000000 ABCDEF01

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f
expect 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 c86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f

packet 0 00000000 00000000 00000000 00000000 00000000 00010000

packet 0 00000000 00000000 00000000 00000000 00000000 00011000

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98453212 d86acf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f

packet 0 001b1700 0130b881 98b7aeb7 08004500 00344a6f 40004006 53920a01 98463212 d86bcf2c 01bbd0fa 585c4ccc b2ac8010 0353c314 00000101 080a0192 463911a0 c06f\n
\n
************************\n******** petr4 stf result: ********\n************************\n
INCLUDE INCLUDE TEXT(
) INCLUDE TEXT(
) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/key-issue-1020_ebpf.p4 : 6")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
