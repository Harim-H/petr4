p4 program:
\n
/*
Copyright 2017 VMware, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
#include <core.p4>
#include <v1model.p4>

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header H {
    bit<8> a;
    bit<8> b;
}

struct Parsed_packet {
    ethernet_t eth;
    H h;
}

struct Metadata {
}

control deparser(packet_out packet, in Parsed_packet hdr) {
    apply {
        packet.emit(hdr);
    }
}

parser p(packet_in pkt, out Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    state start {
        pkt.extract(hdr.eth);
        transition parse_h;
    }
    state parse_h {
        pkt.extract(hdr.h);
        transition accept;
    }
}

control ingress(inout Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    action do_something() {
        stdmeta.egress_spec = 9w0;
    }
    table simple_table {
        key = {
            hdr.h.b: exact;
        }
        actions = {
            NoAction();
            do_something();
        }
        default_action = NoAction;
    }
    apply {
        bit<8> tmp_condition = 8w0;
        switch (simple_table.apply().action_run) {
            NoAction: {
                return;
            }
        }

        hdr.h.a = 8w0;
    }
}

control egress(inout Parsed_packet hdr, inout Metadata meta, inout standard_metadata_t stdmeta) {
    apply {}
}

control vrfy(inout Parsed_packet hdr, inout Metadata meta) {
    apply {}
}

control update(inout Parsed_packet hdr, inout Metadata meta) {
    apply {}
}

V1Switch(p(), vrfy(), ingress(), egress(), update(), deparser()) main;
\n
\n
packet 0 11 11 11 11 11 11 22 22 22 22 22 22 33 33 FF EE
expect 0 11 11 11 11 11 11 22 22 22 22 22 22 33 33 FF EE
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/issue2170-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Calling target program-options parser
Adding interface pcap0 as port 0 (files)
Obtaining JSON from switch...
Done
Control utility for runtime P4 table manipulation
RuntimeCmd: 
Writing temporary files into  ./tmp0nrffufr
Executing  /usr/local/bin//p4c-bm2-ss -o ./tmp0nrffufr/issue2170-bmv2.json /petr4/ci-test/testdata/p4_16_samples/issue2170-bmv2.p4
Exit code  0
Running model
Running simple_switch --log-file switch.log --log-flush --use-files 0 --thrift-port 9606 --device-id 516 -i 0@pcap0 .././tmp0nrffufr/issue2170-bmv2.json
Running simple_switch_CLI --thrift-port 9606
STF Command: packet 0 11 11 11 11 11 11 22 22 22 22 22 22 33 33 FF EE
STF Command: expect 0 11 11 11 11 11 11 22 22 22 22 22 22 33 33 FF EE
simple_switch exit code -15
Execution completed
Comparing outputs
