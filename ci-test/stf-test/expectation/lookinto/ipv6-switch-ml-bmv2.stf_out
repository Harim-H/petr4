p4 program:
\n
/*
* Copyright 2019, MNK Consulting
* http://mnkcg.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
*    How to test this P4 code:
* $ ./p4c-bm2-ss --std p4-16 ../testdata/p4_16_samples/ipv6-switch-ml-bmv2.p4 -o tmp.json
*
*/

#include <v1model.p4>
#include "ml-headers.p4"

const bit<32> BMV2_V1MODEL_INSTANCE_TYPE_REPLICATION   = 5;
#define IS_REPLICATED(std_meta) (std_meta.instance_type == BMV2_V1MODEL_INSTANCE_TYPE_REPLICATION)

parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV6: ipv6;
            default: accept;
        }
    }
    state ipv6 {
        packet.extract(hdr.ipv6);
        transition select(hdr.ipv6.nextHdr) {
            PROTO_UDP: parse_udp;
            PROTO_ICMP6: icmp6;
            default: accept;
        }
    }
    state icmp6 {
        packet.extract(hdr.icmp6);
        transition accept;
    }
    state parse_udp {
        packet.extract(hdr.udp);
        transition accept;	
    }
}

// Our switch table comprises of IPv6 addresses vs. egress_port.
// This is the table we setup here.
control ingress(inout headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    action set_mcast_grp(bit<16> mcast_grp, bit<9> port) {
        standard_metadata.mcast_grp = mcast_grp;
	meta.egress_port = port;
    }
    table ipv6_tbl {
	key = {
            (hdr.ipv6.dstAddr[127:120] == 8w0xff) : exact @name("mcast_key");
	}
	actions = {set_mcast_grp;}
    }

    apply {
        if (hdr.ipv6.isValid()) {
	    ipv6_tbl.apply();
        }
    }
}

control egress(inout headers hdr, inout metadata_t meta,
               inout standard_metadata_t standard_metadata) {
    action set_out_bd (bit<24> bd) {
        meta.fwd.out_bd = bd;
    }
    table get_multicast_copy_out_bd {
        key = {
            standard_metadata.mcast_grp  : exact;
            standard_metadata.egress_rid : exact;
        }
        actions = { set_out_bd; }
    }

    action drop() {
        mark_to_drop(standard_metadata);
    }
    action rewrite_mac(bit<48> smac) {
        hdr.ethernet.srcAddr = smac;
    }
    table send_frame {
        key = {
            meta.fwd.out_bd: exact;
        }
        actions = {rewrite_mac; drop;}
        default_action = drop;
    }

    apply {
        if (IS_REPLICATED(standard_metadata)) {
            get_multicast_copy_out_bd.apply();
	    send_frame.apply();
	}
    }
}

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv6);
        packet.emit(hdr.icmp6);
        packet.emit(hdr.udp);
    }
}

control MyVerifyChecksum(inout headers hdr, inout metadata_t meta) {
    apply {
    }
}

control MyComputeChecksum(inout headers hdr, inout metadata_t meta) {
    apply {
    }
}

V1Switch(MyParser(), MyVerifyChecksum(), ingress(), egress(),
MyComputeChecksum(), MyDeparser()) main;
\n
\n
#
# Copyright 2019, MNK Consulting
# http://mnkcg.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# ipv6-switch-ml-bmv2.stf
#
# Ether(src='00:ae:f3:52:aa:d1')/IPv6(src='fe80::2878:42c6:2586:65de', dst='FF02:0:0:0:0:0:1:8')/UDP()
#
### IPv6 Mcast-destined test ########################
add ipv6_tbl mcast_key:0x1 ingress.set_mcast_grp(mcast_grp:1113, port:0x2)
#
mc_mgrp_create 1113
#
mc_node_create 400 6
mc_node_create 401 7
mc_node_create 402 8
#
mc_node_associate 1113 0
mc_node_associate 1113 1
mc_node_associate 1113 2
#
# first copy of packet through egress
###    table_add get_multicast_copy_out_bd set_out_bd 1113 400 => 10
add get_multicast_copy_out_bd mcast_grp:1113 egress_rid:400 egress.set_out_bd(bd:10)
###    table_add send_frame rewrite_mac 10 => 00:11:22:33:0a:55
add send_frame fwd.out_bd:10 rewrite_mac(smac:0x001122330a55)

# second copy of packet through egress
###    table_add get_multicast_copy_out_bd set_out_bd 1113 401 => 11
add get_multicast_copy_out_bd mcast_grp:1113 egress_rid:401 egress.set_out_bd(bd:11)
###    table_add send_frame rewrite_mac 11 => 00:11:22:33:0b:55
add send_frame fwd.out_bd:11 rewrite_mac(smac:0x001122330b55)

# third copy of packet through egress
###    table_add get_multicast_copy_out_bd set_out_bd 1113 402 => 12
add get_multicast_copy_out_bd mcast_grp:1113 egress_rid:402 egress.set_out_bd(bd:12)
###    table_add send_frame rewrite_mac 12 => 00:11:22:33:0c:55
add send_frame fwd.out_bd:12 rewrite_mac(smac:0x001122330c55)
#
packet 0 33330001000800aef352aad186dd6000000000081140fe80000000000000287842c6258665deff0200000000000000000000000100080035003500080b45
#
expect 6 333300010008001122330a5586dd6000000000081140fe80000000000000287842c6258665deff0200000000000000000000000100080035003500080b45
#
expect 7 333300010008001122330b5586dd6000000000081140fe80000000000000287842c6258665deff0200000000000000000000000100080035003500080b45
#
expect 8 333300010008001122330c5586dd6000000000081140fe80000000000000287842c6258665deff0200000000000000000000000100080035003500080b45
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/ipv6-switch-ml-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
