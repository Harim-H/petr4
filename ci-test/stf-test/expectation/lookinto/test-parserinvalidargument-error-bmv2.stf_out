p4 program:
\n
/*
Copyright 2019 Cisco Systems, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include <core.p4>
#include <v1model.p4>

typedef bit<48>  EthernetAddress;

header ethernet_t {
    EthernetAddress dstAddr;
    EthernetAddress srcAddr;
    bit<16>         etherType;
}

header custom_var_len_t {
    varbit<16> options;
}

struct headers_t {
    ethernet_t       ethernet;
    custom_var_len_t custom_var_len;
}

struct metadata_t {
}

parser parserImpl(packet_in packet,
                  out headers_t hdr,
                  inout metadata_t meta,
                  inout standard_metadata_t stdmeta)
{
    state start {
        packet.extract(hdr.ethernet);
        transition parse_custom_variable_len_header;
    }
    state parse_custom_variable_len_header {
        packet.extract(hdr.custom_var_len,
            (bit<32>) hdr.ethernet.etherType[7:0]);
        transition accept;
    }
}

control verifyChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control ingressImpl(inout headers_t hdr,
                    inout metadata_t meta,
                    inout standard_metadata_t stdmeta)
{
    bit<8> error_as_int;
    apply {
        stdmeta.egress_spec = 1;
        if (stdmeta.parser_error == error.NoError) {
            error_as_int = 0;
        } else if (stdmeta.parser_error == error.PacketTooShort) {
            error_as_int = 1;
        } else if (stdmeta.parser_error == error.NoMatch) {
            error_as_int = 2;
        } else if (stdmeta.parser_error == error.StackOutOfBounds) {
            error_as_int = 3;
        } else if (stdmeta.parser_error == error.HeaderTooShort) {
            error_as_int = 4;
        } else if (stdmeta.parser_error == error.ParserTimeout) {
            error_as_int = 5;
        } else if (stdmeta.parser_error == error.ParserInvalidArgument) {
            error_as_int = 6;
        } else {
            // This should not happen, but just in case, it would be
            // good to have evidence that this case happened, and not
            // some other.
            error_as_int = 7;
        }
        hdr.ethernet.dstAddr[7:0] = error_as_int;
    }
}

control egressImpl(inout headers_t hdr,
                   inout metadata_t meta,
                   inout standard_metadata_t stdmeta)
{
    apply { }
}

control updateChecksum(inout headers_t hdr, inout metadata_t meta) {
    apply { }
}

control deparserImpl(packet_out packet,
                     in headers_t hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        // Intentionally _do not_ emit hdr.custom_var_len, so an STF
        // test can be used to determine which part of the input
        // packet was parsed as that header.
    }
}

V1Switch(parserImpl(),
         verifyChecksum(),
         ingressImpl(),
         egressImpl(),
         updateChecksum(),
         deparserImpl()) main;
\n
\n
# Parser should get no error, and extract 0-length custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0000 deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0000 deadbeef $

# Parser should get no error, and extract 8-bit long custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0008 5a deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0008 deadbeef $

# Parser should get no error, and extract 16-bit long custom header
packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a5a deadbeef
expect 1 ffffffffff00 a5a5a5a5a5a5 0010 deadbeef $

# Parser should experience error HeaderTooShort.
packet 2 ffffffffffff a5a5a5a5a5a5 0018 5a5a5a deadbeef
expect 1 ffffffffff04 a5a5a5a5a5a5 0018 5a5a5a deadbeef $

# Parser should experience error PacketTooShort.
packet 2 ffffffffffff a5a5a5a5a5a5 0010 5a
expect 1 ffffffffff01 a5a5a5a5a5a5 0010 5a $

# Parser should experience error ParserInvalidArgument.
packet 2 ffffffffffff a5a5a5a5a5a5 0001 deadbeef
expect 1 ffffffffff06 a5a5a5a5a5a5 0001 deadbeef $

# Parser should experience error ParserInvalidArgument.
packet 2 ffffffffffff a5a5a5a5a5a5 0007 deadbeef
expect 1 ffffffffff06 a5a5a5a5a5a5 0007 deadbeef $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/test-parserinvalidargument-error-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
