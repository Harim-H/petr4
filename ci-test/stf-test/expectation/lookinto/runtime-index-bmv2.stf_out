p4 program:
\n
/*
* Copyright 2020, MNK Labs & Consulting
* http://mnkcg.com
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

#include <v1model.p4>

typedef bit<48> mac_addr_t;

header aggregator_t {
    bit<8> base0;
    bit<8> base1;
    bit<8> base2;
    bit<8> base3;
    bit<8> val;
}
header vec_e_t {
    bit<8> e;
}

header ml_hdr_t {
    int<8> idx;
}

header ethernet_t {
    mac_addr_t dstAddr;
    mac_addr_t srcAddr;
    bit<16>    etherType;
}

struct headers {
    ethernet_t ethernet;
    ml_hdr_t   ml;
    vec_e_t[3] vector;
    aggregator_t[3] pool;
}

struct metadata_t {
    int<8> counter;
}

parser MyParser(packet_in packet, out headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    state start {
        packet.extract(hdr.ethernet);
        packet.extract(hdr.ml);
        packet.extract(hdr.vector[0]);
        packet.extract(hdr.vector[1]);
        packet.extract(hdr.vector[2]);
        packet.extract(hdr.pool[0]);
        packet.extract(hdr.pool[1]);
        packet.extract(hdr.pool[2]);
        meta.counter = 0;
	transition accept;
    }
}

control ingress(inout headers hdr, inout metadata_t meta,
                inout standard_metadata_t standard_metadata) {
    apply {
        // Legacy programs should not break
        meta.counter = meta.counter + 1;
        hdr.vector[0].e = hdr.pool[1].val + 1;
        // end legacy test.

        // Test runtime index as l-value.
        hdr.pool[hdr.ml.idx].val = hdr.vector[0].e;
        hdr.pool[hdr.ml.idx].base2 = hdr.vector[0].e;
        // Test runtime index as r-value.
        hdr.vector[1].e = hdr.pool[hdr.ml.idx].base0;
        // Test runtime index as l- and r-values.
        hdr.pool[hdr.ml.idx].base0 = hdr.pool[hdr.ml.idx].base1 + 1;
        standard_metadata.egress_spec = standard_metadata.ingress_port;
    }
}

control egress(inout headers hdr, inout metadata_t meta,
               inout standard_metadata_t standard_metadata) {
    apply {}
}

control MyVerifyChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyComputeChecksum(inout headers hdr, inout metadata_t meta) {
    apply {}
}

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr);
    }
}

V1Switch(MyParser(), MyVerifyChecksum(), ingress(), egress(),
MyComputeChecksum(), MyDeparser()) main;

\n
\n
#
# * Copyright 2020 Cisco Systems, Inc.
# *
# * Licensed under the Apache License, Version 2.0 (the "License");
# * you may not use this file except in compliance with the License.
# * You may obtain a copy of the License at
# *
# *    http://www.apache.org/licenses/LICENSE-2.0
# *
# * Unless required by applicable law or agreed to in writing, software
# * distributed under the License is distributed on an "AS IS" BASIS,
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# * See the License for the specific language governing permissions and
# * limitations under the License.
# *
#

######################################################################

# runtime index is max = 02 and hdr.ml.idx in P4 code.
packet 0 ca0107fc001c1111111111110800 02 010203 0000000001 0123456789 abcdef0123
#        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ethernet  ^^^^^^^^^^ pool[0].base0 thru .base4, then .val
#                                     ^^ ml.idx            ^^^^^^^^^^ pool[1]
#                                        ^^ vector[0].e               ^^^^^^^^^^ pool[2]
#                                          ^^ vector[1].e
#                                            ^^ vector[2].e

# - denotes unspecified/unknown values

# After assignment:
#       hdr.vector[0].e = hdr.pool[1].val + 1;
#                                changed VV
#        ca0107fc001c1111111111110800 02 8a0203 0000000001 0123456789 abcdef0123

# After assignment:
#       hdr.pool[hdr.ml.idx].val = hdr.vector[0].e;
#                                                                     changed VV
#        ca0107fc001c1111111111110800 02 8a0203 0000000001 0123456789 abcdef018a

# After assignment:
#       hdr.pool[hdr.ml.idx].base2 = hdr.vector[0].e;
#                                                                 changed VV
#        ca0107fc001c1111111111110800 02 8a0203 0000000001 0123456789 abcd8a018a

# After assignment:
#        hdr.vector[1].e = hdr.pool[hdr.ml.idx].base0;
#                                  changed VV
#        ca0107fc001c1111111111110800 02 8aab03 0000000001 0123456789 abcd8a018a

# After assignment:
#       hdr.pool[hdr.ml.idx].base0 = hdr.pool[hdr.ml.idx].base1 + 1;
#                                                             changed VV
#        ca0107fc001c1111111111110800 02 8aab03 0000000001 0123456789 cecd8a018a

expect 0 ca0107fc001c1111111111110800 02 8aab03 0000000001 0123456789 cecd8a018a

######################################################################

# runtime index is min = 00
packet 0 ca0107fc001c1111111111110800 00 010203 deadbeeff0 0123456789 abcdef0123

# After assignment:
#       hdr.vector[0].e = hdr.pool[1].val + 1;
#                                changed VV
#        ca0107fc001c1111111111110800 00 8a0203 deadbeeff0 0123456789 abcdef0123

# After assignment:
#       hdr.pool[hdr.ml.idx].val = hdr.vector[0].e;
#                                               changed VV
#        ca0107fc001c1111111111110800 00 8a0203 deadbeef8a 0123456789 abcdef0123

# After assignment:
#       hdr.pool[hdr.ml.idx].base2 = hdr.vector[0].e;
#                                           changed VV
#        ca0107fc001c1111111111110800 00 8a0203 dead8aef8a 0123456789 abcdef0123

# After assignment:
#        hdr.vector[1].e = hdr.pool[hdr.ml.idx].base0;
#                                  changed VV
#        ca0107fc001c1111111111110800 00 8ade03 dead8aef8a 0123456789 abcdef0123

# After assignment:
#       hdr.pool[hdr.ml.idx].base0 = hdr.pool[hdr.ml.idx].base1 + 1;
#                                       changed VV
#        ca0107fc001c1111111111110800 00 8ade03 aead8aef8a 0123456789 abcdef0123

expect 0 ca0107fc001c1111111111110800 00 8ade03 aead8aef8a 0123456789 abcdef0123
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/runtime-index-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
