p4 program:
\n
/*
 * Copyright 2020, MNK Labs & Consulting
 * http://mnkcg.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <v1model.p4>

header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header h0_t {
    bit<8>  f0;
}

header h1_t {
    bit<8>  f1;
}

header h2_t {
    bit<8>  f2;
}

header h3_t {
    bit<8>  f3;
}

header h4_t {
    bit<8>  f4;
}

struct metadata {
}

struct headers {
    ethernet_t ethernet;
    h0_t       h0;
    h1_t       h1;
    h2_t       h2;
    h3_t       h3;
    h4_t       h4;
}

parser ParserImpl(
    packet_in packet,
    out headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    state start {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            0x0800 .. 0x0806: parse_h0;
            0x0808: parse_h1;
            0xfff1 .. 0xfffe: parse_h2;
            0x0900: parse_h3;
            0x08ff .. 0x0901: parse_h4;
            default: accept;
        }
    }
    state parse_h0 {
        packet.extract(hdr.h0);
        transition accept;
    }
    state parse_h1 {
        packet.extract(hdr.h1);
        transition accept;
    }
    state parse_h2 {
        packet.extract(hdr.h2);
        transition accept;
    }
    state parse_h3 {
        packet.extract(hdr.h3);
        transition accept;
    }
    state parse_h4 {
        packet.extract(hdr.h4);
        transition accept;
    }
}

control ingress(
    inout headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    apply {
        // Overwrite some bits of one of the header fields so that in
        // the STF test we can match on the output packet contents and
        // know which case was taken in the select expression in the
        // parser.
        hdr.ethernet.dstAddr[44:44] = hdr.h4.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[43:43] = hdr.h3.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[42:42] = hdr.h2.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[41:41] = hdr.h1.isValid() ? 1w1 : 0;
        hdr.ethernet.dstAddr[40:40] = hdr.h0.isValid() ? 1w1 : 0;

        standard_metadata.egress_spec = 3;
    }
}

control egress(
    inout headers hdr,
    inout metadata meta,
    inout standard_metadata_t standard_metadata)
{
    apply {
    }
}

control DeparserImpl(
    packet_out packet,
    in headers hdr)
{
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.h0);
        packet.emit(hdr.h1);
        packet.emit(hdr.h2);
        packet.emit(hdr.h3);
        packet.emit(hdr.h4);
    }
}

control verifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

control computeChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}

V1Switch(
    ParserImpl(),
    verifyChecksum(),
    ingress(),
    egress(),
    computeChecksum(),
    DeparserImpl())
main;
\n
\n
# this should match default case of select expression
packet 1 ffffffffffff ffffffffffff 07ff 00
expect 3 e0ffffffffff ffffffffffff 07ff 00 $

# go to parse_h0
packet 1 ffffffffffff ffffffffffff 0800 00
expect 3 e1ffffffffff ffffffffffff 0800 00 $

packet 1 ffffffffffff ffffffffffff 0806 00
expect 3 e1ffffffffff ffffffffffff 0806 00 $

# default
packet 1 ffffffffffff ffffffffffff 0807 00
expect 3 e0ffffffffff ffffffffffff 0807 00 $

# parse_h1
packet 1 ffffffffffff ffffffffffff 0808 00
expect 3 e2ffffffffff ffffffffffff 0808 00 $

# default
packet 1 ffffffffffff ffffffffffff 0809 00
expect 3 e0ffffffffff ffffffffffff 0809 00 $

# default
packet 1 ffffffffffff ffffffffffff fff0 00
expect 3 e0ffffffffff ffffffffffff fff0 00 $

# parse_h2
packet 1 ffffffffffff ffffffffffff fff1 00
expect 3 e4ffffffffff ffffffffffff fff1 00 $

packet 1 ffffffffffff ffffffffffff fffe 00
expect 3 e4ffffffffff ffffffffffff fffe 00 $

# default
packet 1 ffffffffffff ffffffffffff ffff 00
expect 3 e0ffffffffff ffffffffffff ffff 00 $

# default
packet 1 ffffffffffff ffffffffffff 08fe 00
expect 3 e0ffffffffff ffffffffffff 08fe 00 $

# parse_h4
packet 1 ffffffffffff ffffffffffff 08ff 00
expect 3 f0ffffffffff ffffffffffff 08ff 00 $

# parse_h3
packet 1 ffffffffffff ffffffffffff 0900 00
expect 3 e8ffffffffff ffffffffffff 0900 00 $

# parse_h4
packet 1 ffffffffffff ffffffffffff 0901 00
expect 3 f0ffffffffff ffffffffffff 0901 00 $

# default
packet 1 ffffffffffff ffffffffffff 0902 00
expect 3 e0ffffffffff ffffffffffff 0902 00 $
\n
\n
************************\n******** petr4 stf result: ********\n************************\n
TEXT( ) TEXT(
) TEXT(#) IDENT Uncaught exception:
  
  (Failure
   "Error parsing /petr4/ci-test/testdata/p4_16_samples/issue-2123-2-bmv2.p4 : 2")

Raised at Stdlib.failwith in file "stdlib.ml", line 29, characters 17-33
Called from P4pp__Eval.Make.preprocess in file "lib/eval.ml", line 205, characters 8-100
Called from Main.Conf.preprocess in file "bin/main.ml", line 26, characters 16-74
Called from Common.Make_parse.parse_file in file "bin/common.ml", line 36, characters 20-56
Called from Common.Make_parse.do_stf in file "bin/common.ml", line 104, characters 10-48
Called from Core_kernel__Command.For_unix.run.(fun) in file "src/command.ml", line 2453, characters 8-238
Called from Base__Exn.handle_uncaught_aux in file "src/exn.ml", line 111, characters 6-10
************************\n******** p4c stf result: ********\n************************\n
Traceback (most recent call last):
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 404, in <module>
    main(residual_argv)
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 324, in main
    config = ConfigH(options.compilerBuildDir + "/config.h")
  File "/petr4/p4c/backends/bmv2/run-bmv2-test.py", line 141, in __init__
    with open(file) as a:
FileNotFoundError: [Errno 2] No such file or directory: '/petr4/p4c/build/config.h'
