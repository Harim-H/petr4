diff --git a/deps/poulet4/lib/InlineTypeDecl.v b/deps/poulet4/lib/InlineTypeDecl.v
index c6f33eef..baed90ae 100644
--- a/deps/poulet4/lib/InlineTypeDecl.v
+++ b/deps/poulet4/lib/InlineTypeDecl.v
@@ -73,11 +73,7 @@ Fixpoint sub_typs_P4Type (σ : substitution) (τ : typ) : typ :=
   | TypFunction ft          => TypFunction (σ †ft ft)
   | TypAction cps ps        => TypAction (lmap (σ †p) cps) (lmap (σ †p) ps)
   | TypSpecializedType τ τs => TypSpecializedType (σ †t τ) (lmap (σ †t) τs)
-  (* TODO: correct? *)
-  | TypTypeName
-      (BareName {| P4String.str := T |}
-      | QualifiedName _ {| P4String.str := T |})
-    => sub_default σ T τ
+  | TypTypeName {| P4String.str := T |} => sub_default σ T τ
   | TypPackage Xs ws params
     => TypPackage Xs ws (lmap (σ ∖ (lmap P4String.str Xs) †p) params)
   | TypConstructor Xs ws ps τ
diff --git a/deps/poulet4/lib/LightTyping/Utility.v b/deps/poulet4/lib/LightTyping/Utility.v
index 6e9c558f..e37fd327 100644
--- a/deps/poulet4/lib/LightTyping/Utility.v
+++ b/deps/poulet4/lib/LightTyping/Utility.v
@@ -251,7 +251,7 @@ Inductive
     predopt (fun τ => remove_str (P4String.str X) Δ ⊢ok τ) τ ->
     Δ ⊢ok TypEnum X τ mems
 | typeName_ok X :
-    List.In (string_of_name X) Δ ->
+    List.In (P4String.str X) Δ ->
     Δ ⊢ok TypTypeName X
 | newType_ok X τ :
     remove_str (P4String.str X) Δ ⊢ok τ ->
diff --git a/deps/poulet4/lib/Monads/P4Monad.v b/deps/poulet4/lib/Monads/P4Monad.v
index 08323dc3..93119835 100644
--- a/deps/poulet4/lib/Monads/P4Monad.v
+++ b/deps/poulet4/lib/Monads/P4Monad.v
@@ -11,7 +11,7 @@ Import ListNotations.
 Open Scope monad.
 Open Scope string_scope.
 
-Require Monads.Transformers.
+Require Poulet4.Monads.Transformers.
 
 From RecordUpdate Require Import RecordSet.
 Import RecordSetNotations.
diff --git a/deps/poulet4/lib/Semantics.v b/deps/poulet4/lib/Semantics.v
index b772df20..d7968dd9 100755
--- a/deps/poulet4/lib/Semantics.v
+++ b/deps/poulet4/lib/Semantics.v
@@ -93,13 +93,6 @@ Record genv := MkGenv {
   ge_ext :> extern_env
 }.
 
-Definition name_to_type (ge_typ: genv_typ) (typ : @Typed.name tags_t):
-  option (@P4Type tags_t) :=
-  match typ with
-  | BareName id => IdentMap.get (str id) ge_typ
-  | QualifiedName _ id => IdentMap.get (str id) ge_typ
-  end.
-
 Section WithGenv.
 
 Variable ge : genv.
@@ -169,7 +162,7 @@ Fixpoint get_real_type (typ: @P4Type tags_t): option (@P4Type tags_t) :=
         end
     end in
   match typ with
-  | TypTypeName name => name_to_type ge name
+  | TypTypeName name => IdentMap.get (str name) (ge_typ ge)
   | TypArray atyp size => match get_real_type atyp with
                           | Some realtyp => Some (TypArray atyp size)
                           | None => None
@@ -485,14 +478,14 @@ Inductive exec_expr (read_one_bit : option bool -> bool -> Prop)
                      newsv
   (* No unspecified value possible from this expression *)
   | exec_expr_enum_member : forall tname member ename members this st tag typ dir,
-                            name_to_type ge tname = Some (TypEnum ename None members) ->
+                            IdentMap.get (str tname) (ge_typ ge) = Some (TypEnum ename None members) ->
                             List.In member members ->
                             exec_expr read_one_bit this st
                             (MkExpression tag (ExpTypeMember tname member) typ dir)
                             (ValBaseEnumField (str ename) (str member))
   (* We need rethink about how to handle senum lookup. *)
   | exec_expr_senum_member : forall tname member ename etyp members fields sv this st tag typ dir,
-                             name_to_type ge tname = Some (TypEnum ename (Some etyp) members) ->
+                             IdentMap.get (str tname) (ge_typ ge) = Some (TypEnum ename (Some etyp) members) ->
                              IdentMap.get (str ename) (ge_senum ge) = Some fields ->
                              AList.get fields (str member) = Some sv ->
                              exec_expr read_one_bit this st
@@ -1586,8 +1579,8 @@ Axiom dummy_val : Val.
 
 Definition get_type_name (typ : @P4Type tags_t) : ident :=
   match typ with
-  | TypSpecializedType (TypTypeName (BareName type_name)) _ => str type_name
-  | TypTypeName (BareName type_name) => str type_name
+  | TypSpecializedType (TypTypeName type_name) _ => str type_name
+  | TypTypeName (type_name) => str type_name
   | _ => dummy_ident
   end.
 
@@ -1812,7 +1805,7 @@ Definition is_packet_in (param : @P4Parameter tags_t) : bool :=
   match param with
   | MkParameter _ _ typ _ _ =>
       match typ with
-      | TypTypeName (BareName name) =>
+      | TypTypeName (name) =>
           String.eqb (P4String.str name) "packet_in"
       | _ => false
       end
@@ -1824,7 +1817,7 @@ Definition is_packet_out (param : @P4Parameter tags_t) : bool :=
   match param with
   | MkParameter _ _ typ _ _ =>
       match typ with
-      | TypTypeName (BareName name) =>
+      | TypTypeName (name) =>
           String.eqb (P4String.str name) "packet_out"
       | _ => false
       end
@@ -2106,7 +2099,7 @@ Fixpoint add_to_genv_typ (ge_typ: genv_typ)
   | DeclTypeDef tags name (inl typ)
   | DeclNewType tags name (inl typ) =>
     match typ with
-    | TypTypeName name2 => match name_to_type ge_typ name2 with
+    | TypTypeName name2 => match IdentMap.get (str name2) ge_typ with
                            | Some typ2 => Some (IdentMap.set (str name) typ2 ge_typ)
                            | None => None
                            end
diff --git a/deps/poulet4/lib/Syntax.v b/deps/poulet4/lib/Syntax.v
index 0d02711b..f295cc31 100644
--- a/deps/poulet4/lib/Syntax.v
+++ b/deps/poulet4/lib/Syntax.v
@@ -72,7 +72,7 @@ Section Syntax.
   | ExpUnaryOp (op: OpUni) (arg: Expression)
   | ExpBinaryOp (op: OpBin) (args: (Expression * Expression))
   | ExpCast (typ: @P4Type tags_t) (expr: Expression)
-  | ExpTypeMember (typ: @Typed.name tags_t) (name: P4String)
+  | ExpTypeMember (typ: P4String) (name: P4String)
   | ExpErrorMember (_: P4String)
   | ExpExpressionMember (expr: Expression) (name: P4String)
   | ExpTernary (cond: Expression) (tru: Expression) (fls: Expression)
diff --git a/deps/poulet4/lib/SyntaxUtil.v b/deps/poulet4/lib/SyntaxUtil.v
index a103e913..038e030d 100755
--- a/deps/poulet4/lib/SyntaxUtil.v
+++ b/deps/poulet4/lib/SyntaxUtil.v
@@ -26,8 +26,8 @@ Axiom dummy_ident : unit -> ident. (* make it lazy for extracted OCaml. *)
 
 Definition get_type_name (typ : @P4Type tags_t) : ident :=
   match typ with
-  | TypSpecializedType (TypTypeName (BareName type_name)) _ => type_name
-  | TypTypeName (BareName type_name) => type_name
+  | TypSpecializedType (TypTypeName type_name) _ => type_name
+  | TypTypeName type_name => type_name
   | _ => dummy_ident tt
   end.
 
diff --git a/deps/poulet4/lib/ToP4cub.v b/deps/poulet4/lib/ToP4cub.v
index 67553613..c24e6b5c 100644
--- a/deps/poulet4/lib/ToP4cub.v
+++ b/deps/poulet4/lib/ToP4cub.v
@@ -415,13 +415,7 @@ Section ToP4cub.
       E.TStruct fields'
     | TypEnum name typ members =>
       ok (cub_type_of_enum members)
-    | TypTypeName name =>
-      match name with
-      | BareName nm =>
-        ok (E.TVar (P4String.str nm))
-      | QualifiedName _ _ =>
-        error "Unsure how to handle qualified names"
-      end
+    | TypTypeName name => ok (E.TVar (P4String.str name))
     | TypNewType name typ =>
       let+ typ' := translate_exp_type i typ in
       typ'
@@ -483,8 +477,7 @@ Section ToP4cub.
     | TypHeaderUnion _ => error "cannot get type name from Header Union"
     | TypStruct _ => error "cannot get type name from struct"
     | TypEnum _ _ _ => error "cannot get type name from enum"
-    | TypTypeName (BareName str) => ok str
-    | TypTypeName (QualifiedName _ _) => error "cannot use qualified names in type string extraction"
+    | TypTypeName str => ok str
     | TypNewType str _ => ok str
     | TypControl c => error "[FIXME] get name from control type"
     | TypParser c => error "[FIXME] get name from parser type"
@@ -749,7 +742,7 @@ Section ToP4cub.
       translate_is_valid tags callee ret_var
     else
       match get_type_of_expr callee with
-      | TypTypeName (BareName extern_obj) =>
+      | TypTypeName extern_obj =>
         translate_extern_string tags ctx (P4String.str extern_obj) f_str args
       | _ =>
         error (String.append "ERROR: :: Cannot translate non-externs member functions that aren't `apply`s: " f_str)
@@ -1082,7 +1075,7 @@ Section ToP4cub.
       error "[FIXME] translate parser as constructor param"
     | TypPackage _ _ _  =>
       error "[FIXME] translate package as constructor param"
-    | TypSpecializedType (TypTypeName (BareName name)) _   =>
+    | TypSpecializedType (TypTypeName ( name)) _   =>
       ok (v_str, E.CTType (E.TVar (P4String.str name)))
     | _ =>
       error "[FIXME] dont kjnow how to translate type to constructor type"
diff --git a/deps/poulet4/lib/Typed.v b/deps/poulet4/lib/Typed.v
index 53a4f87c..39dd7e59 100644
--- a/deps/poulet4/lib/Typed.v
+++ b/deps/poulet4/lib/Typed.v
@@ -1,5 +1,4 @@
-Require Import Coq.Numbers.BinNums.
-Require Import Coq.Classes.EquivDec.
+From Coq Require Import Numbers.BinNums Classes.EquivDec.
 
 Require Poulet4.P4String.
 Require Poulet4.P4Int.
@@ -56,7 +55,7 @@ Section Typed.
   | TypHeaderUnion (fields: P4String.AList tags_t P4Type)
   | TypStruct (fields: P4String.AList tags_t P4Type)
   | TypEnum (name: P4String) (typ: option P4Type) (members: list P4String)
-  | TypTypeName (name: name)
+  | TypTypeName (name: P4String)
   | TypNewType (name: P4String) (typ: P4Type)
   | TypControl (_: ControlType)
   | TypParser (_: ControlType)
